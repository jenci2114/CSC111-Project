"""CSC111 Final Project: AI Player in Chinese Chess

Module Description
===============================

This Python module contains training functions for AI Player.

Copyright and Usage Information
===============================

This file is Copyright (c) 2021 Junru Lin, Zixiu Meng, Krystal Miao and Jenci Wei
"""
import chess_game
from chess_game import ChessGame
from game_tree import GameTree, tree_to_xml, xml_to_tree
from player import LearningPlayer

recording_rate = 0.5


def training_for_probability(tree_file: str, number: int, depth: int) -> None:
    """Train the AI Player with tree in tree_file number times, using LearningPlayer with
    exploring depth being depth.

    In each round of training, the function only records the moves the Players choose, and
    will add sequence of moves in each round to the tree. The probability of the whole tree
    will be updated in each round.

    Preconditions:
        - tree_file must be a file generated by the tree_to_xml function
        - rounds > 0
        - depth > 0
    """
    tree = xml_to_tree(tree_file)
    for _ in range(number):
        game = ChessGame()
        red = LearningPlayer(depth, tree_file)
        black = LearningPlayer(depth, tree_file)
        current_player = red

        moves_so_far = []
        points_so_far = []
        previous_move = None

        # simulate a game
        while game.get_winner() is None:
            previous_move = current_player.make_move(game, previous_move)
            game.make_move(previous_move)
            board = game.get_board()
            moves_so_far.append(previous_move)
            points_so_far.append(chess_game.calculate_absolute_points(board))

            if current_player is red:
                current_player = black
            else:  # if current_player is black
                current_player = red

        if current_player == red:  # Black wins
            tree.insert_move_sequence(moves_so_far, points_so_far, black_win_probability=1.0)
        else:  # Red wins
            tree.insert_move_sequence(moves_so_far, points_so_far, red_win_probability=1.0)

    tree_to_xml(tree, tree_file)


def training_for_points(tree_file: str, number: int, depth: int) -> None:
    """Train the AI Player with tree in tree_file number times, using LearningPlayer with
    exploring depth being depth.

    In each round of training, the function records the moves with top recording_rate of
    the moves the Players explore, and will add these moves to the tree. The probability of
    the tree will not be updated in these trainings.

    Set the win probability as -1 so that the interaction AI can identify which moves have been
    explored, and thus it can directly choose a move without using alpha-beta algorithm,
    which can save lots of time.

    Preconditions:
        - tree_file must be a file generated by the tree_to_xml function
        - rounds > 0
        - depth > 0
    """
    tree = xml_to_tree(tree_file)
    for _ in range(number):
        # exploring_tree is the whole tree generated in this game
        exploring_tree = GameTree(red_win_probability=-1, black_win_probability=-1)
        # current_tree is used to trace the leaf corresponding to the latest move in exploring_tree
        current_tree = exploring_tree
        game = ChessGame()
        red = LearningPlayer(depth, tree_file)
        black = LearningPlayer(depth, tree_file)
        current_player = red

        previous_move = None

        # simulate a game
        while game.get_winner() is None:
            previous_move = current_player.make_move(game, previous_move)
            game.make_move(previous_move)
            current_tree.merge_with(current_player.get_tree())

            # update current_tree to the subtree with previous_move
            for subtree in current_tree.get_subtrees():
                if subtree.move == previous_move:
                    current_tree = subtree
                    break

            # update current_player for the next turn
            if current_player is red:
                current_player = black
            else:  # if current_player is black
                current_player = red

        tree.merge_with(exploring_tree)

    tree_to_xml(tree, tree_file)


if __name__ == '__main__':
    training_for_probability('data/tree.xml', number=1, depth=2)
    # training_for_points('data/tree.xml', number=1, depth=2)
